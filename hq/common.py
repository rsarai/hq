import re
import pytz

from datetime import datetime

from orger import Mirror
from orger import inorganic
from orger.inorganic import OrgNode, timestamp_with_style
from orger.common import settings

from os.path import isfile, join
from pathlib import Path

from orger import Mirror
from orger import inorganic

from hq.config import SecondBrain as second_brain
from hq.settings import IMAGES_FOLDER

DEFAULT_GLOB = '*'


def parse_datetime(date: str, format: str, timezone:str = 'America/Recife'):
    zone = pytz.timezone(timezone)
    new_datetime = datetime.strptime(date, format)
    try:
        parsed_date = zone.localize(new_datetime)
    except ValueError:
        parsed_date = new_datetime

    return parsed_date


def get_files(dir_path, glob=DEFAULT_GLOB, sort=False):
    sources = None
    if isinstance(dir_path, Path):
        sources = [dir_path]
    elif isinstance(dir_path, str):
        sources = [Path(dir_path)]
    else:
        sources = [Path(p) for p in dir_path]

    paths = []
    for src in sources:
        if src.parts[0] == '~':
            src = src.expanduser()

        if src.is_dir():
            files = src.glob(glob)
            paths += list(files)
        else:
            paths.append(src)

    if sort:
        paths = list(sorted(paths))

    return paths


def dt_heading(dt, heading):
    if dt is None:
        return heading
    else:
        return '#+title: ' + heading + " " + timestamp_with_style(dt=dt, style=settings.DEFAULT_TIMESTAMP_STYLE)


def asorgoutline(
        heading=None,
        todo=None,
        tags=[],
        scheduled=None,
        properties=None,
        body=None,
        level=1,
        escaped=False,
):
    """
    This method is exactly the same as the one on the library except for the sublevels print
    I wanted something more minimal for this view.
    """
    if heading is None:
        heading = ''
    # TODO reuse sanitizing?
    if not escaped:
        heading = re.sub(r'\s', ' ', heading)

    # TODO not great that we always pad body I guess. maybe needs some sort of raw_body argument?
    safe_body = None
    if body is not None:
        safe_body = body if escaped else inorganic._sanitize_body(body)
    del body # just so it's not used by accident

    parts = []

    if level > 0:
        parts.append('-')

    if todo is not None:
        parts.append(todo)

    if len(heading) > 0:
        parts.append(heading)

    if len(tags) > 0:
        tags_s = ':' + ':'.join(map(inorganic._sanitize_tag, tags)) + ':'
        parts.append(tags_s)

    sch_lines = [] if scheduled is None else [
        'SCHEDULED: ' + inorganic.timestamp(scheduled, active=True)
    ]

    props_lines = []
    props = {} if properties is None else properties
    if len(props) > 0:
        props_lines.append(':PROPERTIES:')
        props_lines.extend(f':{prop}: {value}' for prop, value in props.items())
        props_lines.append(':END:')

    body_lines = [] if safe_body is None else [safe_body]

    if level > 0 and len(parts) == 1:
        # means it's only got level stars, so we need to make sure space is present (otherwise it's not an outline)
        parts.append('')
    lines = [
        ' '.join(parts), # TODO just in case check that parts doesn't have newlines?
        *sch_lines,
        *props_lines,
        *body_lines,
    ]
    # TODO careful here, I guess actually need some tests for endlines
    return '\n'.join(lines)


class SimpleOrgNode(OrgNode):
    def _render_self(self):
        return asorgoutline(
            heading=inorganic._from_lazy(self.heading),
            todo=self.todo,
            tags=self.tags,
            properties=self.properties,
            scheduled=self.scheduled,
            body=self.body,
            level=0,
            escaped=self.escaped,
        )

    def render(self, level=1):
        rh = self._render_hier()
        rh = [(level + l, x) for l, x in rh]

        lines = []
        for l, x in rh:
            if "# This file is AUTOGENERATED by" in x:
                lines.append(x)
            elif "#+" in x:
                lines.append(x)
            elif "* " in x:
                lines.append(x)
            elif x == '':
                lines.append(x)
            elif 'file:' in x:
                x = x.replace('%20', '+')
                begin = x.split('file:', 1)[0]
                end = x.split('file:', 1)[1]
                line = begin + 'file:' + IMAGES_FOLDER + end
                lines.append(line)
            else:
                lines.append('-' + (' ' if l > 0 else '') + x)
        return '\n'.join(lines)


class Replica(Mirror):

    def make_tree(self):
        items = []
        for p in self.get_items():
            # it's ok to use items without keys in View
            if isinstance(p, SimpleOrgNode):
                items.append(p)
            else:
                items.append(p[1]) # presumably, OrgWithKey

        split = self.file_header.splitlines(keepends=True)
        heading = split[0].rstrip()
        body = ''.join(split[1:])
        return SimpleOrgNode(
            heading=heading,
            body=body,
            children=items,
            escaped=True,
        )

    def _run(self, to):
        org_tree = self.make_tree()
        rtree = org_tree.render(level=0)
        destination = Path(second_brain.export_path + '/' + str(to.stem) + '.org')

        to.touch()
        to.write_text(rtree)
        to.replace(destination)
